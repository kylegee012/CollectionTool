/**
 * This class is generated by jOOQ
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.GadgetRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gadget extends TableImpl<GadgetRecord> {

    private static final long serialVersionUID = -1884740434;

    /**
     * The reference instance of <code>PUBLIC.GADGET</code>
     */
    public static final Gadget GADGET = new Gadget();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GadgetRecord> getRecordType() {
        return GadgetRecord.class;
    }

    /**
     * The column <code>PUBLIC.GADGET.GADGETID</code>.
     */
    public final TableField<GadgetRecord, Long> GADGETID = createField("GADGETID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("(NEXT VALUE FOR PUBLIC.SYSTEM_SEQUENCE_7C7DC8B5_15AA_4DCC_802C_6AF18C7634AC)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>PUBLIC.GADGET.GADGETNAME</code>.
     */
    public final TableField<GadgetRecord, String> GADGETNAME = createField("GADGETNAME", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * Create a <code>PUBLIC.GADGET</code> table reference
     */
    public Gadget() {
        this("GADGET", null);
    }

    /**
     * Create an aliased <code>PUBLIC.GADGET</code> table reference
     */
    public Gadget(String alias) {
        this(alias, GADGET);
    }

    private Gadget(String alias, Table<GadgetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gadget(String alias, Table<GadgetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GadgetRecord, Long> getIdentity() {
        return Keys.IDENTITY_GADGET;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GadgetRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_7;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GadgetRecord>> getKeys() {
        return Arrays.<UniqueKey<GadgetRecord>>asList(Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Gadget as(String alias) {
        return new Gadget(alias, this);
    }

    /**
     * Rename this table
     */
    public Gadget rename(String name) {
        return new Gadget(name, null);
    }
}
